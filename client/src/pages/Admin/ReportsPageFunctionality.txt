# Admin Reports Page - Technical Documentation

## 🧾 Page Overview
This page is used by Admins to:
- View overall system stats (patients, appointments, etc.)
- Track health metrics across all users
- Filter and analyze data based on date, type, or notes
- Visualize health trends over time

---

## 🧩 Component Breakdown & Functionality

### 1. **Statistics Summary (Top Cards)**
- Displays:
  - Total Patients
  - Total Appointments
  - Average Glucose
  - Average Blood Pressure
  - Total Alerts
- 🔗 API: `GET /api/reports/stats`
- ♻️ Uses real-time backend data
- 🧠 Purpose: Gives quick overview of system performance

---

### 2. **Health Data Table**
- Shows health records for all patients (for admin role)
- Includes:
  - Type, Value, Unit
  - Recorded Date
  - Notes
  - Patient Info (if available)
- 🔗 API: `GET /api/reports/health-data`
- 🧠 Purpose: Detailed logs of health metrics

---

### 3. **Filters (above table)**
- ✅ Date Range: start & end date pickers
  - Sent to backend via query params
- ✅ Search Input: Searches in `notes` field
- ✅ Metric Type Dropdown: Filters by `glucose`, `blood_pressure`, etc.
- 🔗 All filters are passed to `/api/reports/health-data`
- 🧠 Purpose: Allows admin to drill down into specific data segments

---

### 4. **Recent Trends Widget (Line Chart)**
- Displays line chart for:
  - Glucose
  - Systolic BP
  - Diastolic BP
- 🔗 API: `GET /api/analytics/recent-trends`
- 📊 Uses Recharts for visualization
- 🧠 Purpose: Track changes over time to detect trends or problems

---

### 5. **Search & Filtering Logic**
- Filters are combined (AND logic)
- All passed to backend to avoid slow frontend-only filtering
- Real-time update via React Query

---

## 🔧 Technologies Behind the Page
- React Query for fetching and caching
- Recharts for data visualization
- Express.js backend with Sequelize
- Role-based access control (admin only)
- TypeScript with interfaces for safe props/data

---

## 📊 API Endpoints Used

### 1. **GET /api/reports/stats**
- **Purpose**: Fetch system-wide statistics
- **Response**: 
  ```json
  {
    "totalPatients": 123,
    "totalAppointments": 45,
    "averageGlucose": 98.2,
    "averageBloodPressure": {
      "systolic": 120.1,
      "diastolic": 78.5
    },
    "totalAlerts": 10
  }
  ```
- **Access**: Admin only
- **Caching**: React Query with key `["reportStats", "admin"]`

### 2. **GET /api/reports/health-data**
- **Purpose**: Fetch filtered health metrics
- **Query Parameters**:
  - `startDate` (optional): Filter by start date
  - `endDate` (optional): Filter by end date
  - `searchTerm` (optional): Search in notes field
  - `metricType` (optional): Filter by metric type
- **Response**: Array of health metrics
- **Access**: Admin (all users) / Patient (own data only)
- **Caching**: React Query with key `["healthData", "admin", startDate, endDate, searchTerm, metricType]`

### 3. **GET /api/analytics/recent-trends**
- **Purpose**: Fetch daily averages for trend visualization
- **Response**: 
  ```json
  [
    { "date": "2025-07-03", "type": "glucose", "average": 112.5 },
    { "date": "2025-07-03", "type": "systolic", "average": 121.0 },
    { "date": "2025-07-03", "type": "diastolic", "average": 78.2 }
  ]
  ```
- **Access**: Admin only
- **Caching**: React Query with key `["recent-trends", "admin"]`

---

## 🎯 State Management

### **Local State Variables**
```typescript
const [searchTerm, setSearchTerm] = useState("");
const [startDate, setStartDate] = useState("");
const [endDate, setEndDate] = useState("");
const [metricType, setMetricType] = useState("");
```

### **React Query Hooks**
```typescript
// Health data with filtering
const { data: healthData, isLoading: healthDataLoading, isError: healthDataError, refetch: refetchHealthData } = useQuery({
  queryKey: ["healthData", "admin", startDate, endDate, searchTerm, metricType],
  queryFn: () => getHealthData(startDate, endDate, searchTerm, metricType),
});

// System stats
const { data: reportStats, isLoading: statsLoading, isError: statsError } = useQuery({
  queryKey: ["reportStats", "admin"],
  queryFn: getReportStats,
});

// Recent trends
const { data: trendsData, isLoading: trendsLoading, isError: trendsError } = useQuery({
  queryKey: ["recent-trends", "admin"],
  queryFn: getRecentTrends,
});
```

---

## 🔍 Filtering Implementation

### **Backend Filtering Logic**
```javascript
// In getHealthMetricsWithDateRange service
const where = {};

// User filter (admin sees all, patients see own)
if (user.role !== 'admin') {
  where.userId = user.id;
}

// Date range filter
if (startDate && endDate) {
  where.recordedAt = { [Op.between]: [start, end] };
}

// Search term filter (case-insensitive)
if (searchTerm && searchTerm.trim()) {
  where.notes = { [Op.iLike]: `%${searchTerm.trim()}%` };
}

// Metric type filter
if (metricType && metricType.trim()) {
  where.type = metricType.trim();
}
```

### **Frontend Filtering**
- All filtering is done on the backend for performance
- React Query automatically refetches when filter parameters change
- Manual refetch available via "Filter" button

---

## 📈 Data Visualization

### **TrendsChart Component**
- **Library**: Recharts
- **Chart Type**: Line chart with 3 lines
- **Data Processing**: Groups backend data by date, each metric type as a line
- **Colors**: 
  - Glucose: Purple (#8b5cf6)
  - Systolic BP: Red (#ef4444)
  - Diastolic BP: Blue (#3b82f6)
- **Features**: Tooltips, legends, responsive design

---

## 🛡️ Security & Access Control

### **Role-Based Access**
- **Admin**: Can view all users' health data and system stats
- **Patient**: Can only view their own health data (if endpoint is accessed)
- **Middleware**: `roleMiddleware(['admin'])` on sensitive endpoints

### **Data Validation**
- Date validation on backend
- SQL injection prevention via Sequelize ORM
- Input sanitization for search terms

---

## 🚀 Performance Optimizations

### **React Query Benefits**
- Automatic caching and background updates
- Deduplication of requests
- Optimistic updates
- Error handling and retries

### **Backend Optimizations**
- Database indexes on `recordedAt`, `type`, `userId`
- Efficient WHERE clauses with proper operators
- Pagination-ready structure (can be extended)

---

## 🔄 Data Flow

1. **Page Load**: React Query fetches initial data
2. **User Interaction**: State updates trigger new queries
3. **Backend Processing**: Filters applied at database level
4. **Response**: Filtered data returned to frontend
5. **UI Update**: Components re-render with new data

---

## 📝 TypeScript Interfaces

```typescript
interface HealthDataPoint {
  id: string;
  userId: number;
  type: string;
  value: string;
  unit?: string;
  recordedAt: string;
  notes?: string;
}

interface ReportStats {
  totalPatients: number;
  totalAppointments: number;
  averageGlucose: number;
  averageBloodPressure: {
    systolic: number;
    diastolic: number;
  };
  totalAlerts: number;
}

interface TrendDataPoint {
  date: string;
  type: 'glucose' | 'systolic' | 'diastolic';
  average: number;
}
```

---

## 🐛 Error Handling

### **Frontend Error States**
- Loading skeletons for all sections
- Error messages for failed API calls
- Empty states for no data
- Graceful degradation

### **Backend Error Handling**
- Try-catch blocks in controllers
- Proper HTTP status codes
- Error messages for debugging
- Database connection error handling

---

## 🔮 Future Enhancements

### **Planned Features**
- Value range filtering (min/max values)
- Advanced sorting options
- Export filtered data
- Saved filter presets
- Real-time data updates
- Pagination for large datasets

### **Technical Improvements**
- Search debouncing
- Virtual scrolling for large tables
- Advanced chart options
- Data caching strategies
- Performance monitoring 